import { createSlice, PayloadAction  } from "@reduxjs/toolkit";

export type Animal = {
    id: number,
    name: string,
    type: string,
    img: string
}

interface AnimalStateType {
    // birds:Animal[],
    // mammals: Animal[],
    // reptiles: Animal [],
    animals: Animal[],
    // invertebrates: Animal[],
    // amphibians: Animal[],
    // fish: Animal[],
    loading: boolean
}

const initialState: AnimalStateType = {
    // birds : [],
    // mammals: [],
    // reptiles: [],
    // invertebrates: [],
    // amphibians: [],
    // fish: [],
    animals: [],
    loading: false
  }

export const animalSlice = createSlice({
    name: 'animal',
    initialState,
    reducers: {
        setAllAnimals: (state, action: PayloadAction<Animal[]>) => {
            state.animals=action.payload;
        },
        setLoading: (state, action: PayloadAction<boolean>) => {
            state.loading = action.payload;
        },
        addAnimal: (state, action: PayloadAction<Animal>) => {
            const animal = {
                id: Math.random() * 100,
                name: action.payload.name,
                type: action.payload.type,
                img: action.payload.img
            };
            state.animals=[...state.animals, animal];
            window.localStorage.setItem(`animals`, JSON.stringify(state.animals))

            // if (animal.type==='bird'){
            //     state.birds=[...state.birds, animal]
            //     window.localStorage.setItem(`${animal.type}`, JSON.stringify(state.birds))
            // }

            // if (animal.type==='mammals'){
            //     state.mammals=[...state.mammals, animal]
            //     window.localStorage.setItem(`${animal.type}`, JSON.stringify(state.mammals))
            // }
            // if (animal.type==='reptiles'){
            //     state.reptiles=[...state.reptiles, animal]
            //     window.localStorage.setItem(`${animal.type}`, JSON.stringify(state.reptiles))
            // }
            // if (animal.type==='invertebrates'){
            //     state.invertebrates=[...state.invertebrates, animal]
            //     window.localStorage.setItem(`${animal.type}`, JSON.stringify(state.invertebrates))
            // }
            // if (animal.type==='amphibians'){
            //     state.mammals=[...state.amphibians, animal]
            //     window.localStorage.setItem(`${animal.type}`, JSON.stringify(state.amphibians))
            // }
            // if (animal.type==='fish'){
            //     state.mammals=[...state.fish, animal]
            //     window.localStorage.setItem(`${animal.type}`, JSON.stringify(state.fish))
            // }


        },
        removeAnimal: (state, action:PayloadAction<number>) => {
            state.animals = state.animals.filter((animals) => animals.id !== action.payload);
            window.localStorage.setItem(`animals`, JSON.stringify(state.animals))
        },
        sortAnimal: (state, action: PayloadAction<string>) => {
            console.log(action.payload)
            state.animals = state.animals.filter((animals) => animals.type === action.payload);
            window.localStorage.setItem(`animalsSorted`, JSON.stringify(state.animals))
        }
        },
    });

    export const { addAnimal, removeAnimal, setAllAnimals, setLoading, sortAnimal } = animalSlice.actions;
    export default animalSlice.reducer;